
53....
class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int max1=INT_MIN,sum=0;
        for(int i=0;i<nums.size();i++)
        {
            sum+=nums[i];
            max1=max(sum,max1);
            if(sum<0)
            sum=0;
        }
        return max1;
    }
};

974....
class Solution {
public:
    int subarraysDivByK(vector<int>& nums, int k) {
        int n = nums.size();
        int prefixMod = 0, result = 0;

        // There are k mod groups 0...k-1.
        vector<int> modGroups(k);
        modGroups[0] = 1;

        for (int num : nums) {
            // Take modulo twice to avoid negative remainders.
            prefixMod = (prefixMod + num % k + k) % k;
            // Add the count of subarrays that have the same remainder as the current
            // one to cancel out the remainders.
            result += modGroups[prefixMod];
            modGroups[prefixMod]++;
        }

        return result;
    }
};


560...........
class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
        map<int,int>mp;
        int sum=0,res=0,diff=0;
        mp.insert({0,1});
        for(int i=0;i<nums.size();i++)
        {
            sum+=nums[i];
            diff=sum-k;
            if(mp.find(diff)!=mp.end())
            {
                res+=mp[diff];
            }
            mp[sum]++;
            
        }
        
        return res;
    }
};
